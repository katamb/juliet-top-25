package testcases.CWE190_Integer_Overflow.s06;

import javax.servlet.http.*;

public class ServletMain extends HttpServlet {

    private static final long serialVersionUID = 1L; /* needed since Servlets are serializable */


    public void doPost(HttpServletRequest request, HttpServletResponse response) {
        doGet(request, response);
    }

    public void doGet(HttpServletRequest request, HttpServletResponse response) {
        doGetCWE1(request, response);
        doGetCWE2(request, response);
        doGetCWE3(request, response);
        doGetCWE4(request, response);
        doGetCWE5(request, response);
        doGetCWE6(request, response);
        doGetCWE7(request, response);
        doGetCWE8(request, response);
        doGetCWE9(request, response);
    }

    private static void doGetCWE1(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-1 */
            (new testcases.CWE190_Integer_Overflow.s06.J16679()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16678()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16589()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16588()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16571()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16570()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16643()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16642()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16607()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16606()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16649()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16648()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16627()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16626()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16615()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16614()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16619()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16618()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16637()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16636()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16659()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16658()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16635()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16634()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16599()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16598()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16651()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16650()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16687()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16686()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16581()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16580()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16601()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16600()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16683()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16682()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16617()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16616()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16671()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16670()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16645()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16644()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16583()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16582()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16633()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16632()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16577()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16576()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16639()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16638()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16629()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16628()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16575()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16574()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16663()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16662()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16657()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16656()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16557()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16556()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16667()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16666()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16565()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16564()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16681()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16680()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16621()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16620()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16647()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16646()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16585()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16584()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16559()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16558()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16611()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16610()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16593()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16592()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16675()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16674()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16673()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16672()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16661()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16660()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16669()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16668()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16623()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16622()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16603()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16602()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16685()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16684()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16665()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16664()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16569()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16568()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16561()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16560()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16587()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16586()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16653()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16652()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16573()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16572()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16579()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16578()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16591()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16590()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16677()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16676()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16641()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16640()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16609()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16608()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16595()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16594()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16597()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16596()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16563()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16562()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16567()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16566()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16625()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16624()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16613()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16612()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16655()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16654()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16605()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16604()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16631()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s06.J16630()).runTest(request, response);
            /* END-AUTOGENERATED-SERVLET-TESTS-1 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE1 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE2(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-2 */

            /* END-AUTOGENERATED-SERVLET-TESTS-2 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE2 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE3(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-3 */

            /* END-AUTOGENERATED-SERVLET-TESTS-3 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE3 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE4(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-4 */

            /* END-AUTOGENERATED-SERVLET-TESTS-4 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE4 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE5(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-5 */

            /* END-AUTOGENERATED-SERVLET-TESTS-5 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE5 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {

                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE6(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-6 */

            /* END-AUTOGENERATED-SERVLET-TESTS-6 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE6 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE7(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-7 */

            /* END-AUTOGENERATED-SERVLET-TESTS-7 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE7 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE8(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-8 */

            /* END-AUTOGENERATED-SERVLET-TESTS-8 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE8 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE9(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-9 */

            /* END-AUTOGENERATED-SERVLET-TESTS-9 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE9 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }
}

