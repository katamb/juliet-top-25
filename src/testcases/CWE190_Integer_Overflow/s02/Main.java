package testcases.CWE190_Integer_Overflow.s02;

import testcasesupport.*;

public class Main {

    public static void main(String[] args) {

        if (args.length != 0) {

            if (args[0].equals("-h") || args[0].equals("--help")) {

                System.err.println("To use this main, you can either run the program with no " +
                        "command line arguments to run all test cases or you can specify one or more classes to test");
                System.err.println("For example:");
                System.err.println("java testcasesupport.Main testcases.CWE690_Unchecked_Return_Value_to_NULL_Pointer_Dereference.custom_function.CWE690_Unchecked_Return_Value_to_NULL_Pointer_Dereference__custom_function_01 testcases.CWE481_Assigning_instead_of_Comparing.bool.CWE481_Assigning_instead_of_Comparing__bool_01");
                System.exit(1);
            }

            /* User supplied some class names on the command line, just use those with introspection
             *
             * String classNames[] = { "CWE481_Assigning_instead_of_Comparing__boolean_01",
             *		"CWE476_Null_Pointer_Dereference__getProperty_01" };
             * could read class names from command line or use
             * http://sadun-util.sourceforge.net/api/org/sadun/util/
             * ClassPackageExplorer.html
             */

            for (String className : args) {

                try {

                    /* String classNameWithPackage = "testcases." + className; */

                    /* IO.writeLine("classNameWithPackage = " + classNameWithPackage); */

                    Class<?> myClass = Class.forName(className);

                    AbstractTestCase myObject = (AbstractTestCase) myClass
                            .newInstance();

                    myObject.runTest(className);

                } catch (Exception ex) {

                    IO.writeLine("Could not run test for class " + className);
                    ex.printStackTrace();

                }

                IO.writeLine(""); /* leave a blank line between classes */

            }

        } else {

            /* No command line args were used, we want to run every testcase */
			
			/* needed to separate these calls into other methods because
			   we were running into the size limit Java has for a single method */
            runTestCWE1();
            runTestCWE2();
            runTestCWE3();
            runTestCWE4();
            runTestCWE5();
            runTestCWE6();
            runTestCWE7();
            runTestCWE8();
            runTestCWE9();
        }
    }

    private static void runTestCWE1() {
        /* BEGIN-AUTOGENERATED-JAVA-TESTS-1 */
        (new testcases.CWE190_Integer_Overflow.s02.J1187()).runTest("CWE190_Integer_Overflow__int_File_add_01");
        (new testcases.CWE190_Integer_Overflow.s02.J1186()).runTest("CWE190_Integer_Overflow__int_File_add_01");
        (new testcases.CWE190_Integer_Overflow.s02.J1181()).runTest("CWE190_Integer_Overflow__int_Environment_add_01");
        (new testcases.CWE190_Integer_Overflow.s02.J1180()).runTest("CWE190_Integer_Overflow__int_Environment_add_01");
        (new testcases.CWE190_Integer_Overflow.s02.J1179()).runTest("CWE190_Integer_Overflow__int_database_square_01");
        (new testcases.CWE190_Integer_Overflow.s02.J1178()).runTest("CWE190_Integer_Overflow__int_database_square_01");
        (new testcases.CWE190_Integer_Overflow.s02.J1183()).runTest("CWE190_Integer_Overflow__int_Environment_multiply_01");
        (new testcases.CWE190_Integer_Overflow.s02.J1182()).runTest("CWE190_Integer_Overflow__int_Environment_multiply_01");
        (new testcases.CWE190_Integer_Overflow.s02.J1185()).runTest("CWE190_Integer_Overflow__int_Environment_square_01");
        (new testcases.CWE190_Integer_Overflow.s02.J1184()).runTest("CWE190_Integer_Overflow__int_Environment_square_01");
        (new testcases.CWE190_Integer_Overflow.s02.J1189()).runTest("CWE190_Integer_Overflow__int_File_multiply_01");
        (new testcases.CWE190_Integer_Overflow.s02.J1188()).runTest("CWE190_Integer_Overflow__int_File_multiply_01");
        (new testcases.CWE190_Integer_Overflow.s02.J1191()).runTest("CWE190_Integer_Overflow__int_File_square_01");
        (new testcases.CWE190_Integer_Overflow.s02.J1190()).runTest("CWE190_Integer_Overflow__int_File_square_01");
        (new testcases.CWE190_Integer_Overflow.s02.J1177()).runTest("CWE190_Integer_Overflow__int_database_multiply_01");
        (new testcases.CWE190_Integer_Overflow.s02.J1176()).runTest("CWE190_Integer_Overflow__int_database_multiply_01");
        /* END-AUTOGENERATED-JAVA-TESTS-1 */
    }

    private static void runTestCWE2() {
        /* BEGIN-AUTOGENERATED-JAVA-TESTS-2 */

        /* END-AUTOGENERATED-JAVA-TESTS-2 */
    }

    private static void runTestCWE3() {
        /* BEGIN-AUTOGENERATED-JAVA-TESTS-3 */

        /* END-AUTOGENERATED-JAVA-TESTS-3 */
    }

    private static void runTestCWE4() {
        /* BEGIN-AUTOGENERATED-JAVA-TESTS-4 */

        /* END-AUTOGENERATED-JAVA-TESTS-4 */
    }

    private static void runTestCWE5() {
        /* BEGIN-AUTOGENERATED-JAVA-TESTS-5 */

        /* END-AUTOGENERATED-JAVA-TESTS-5 */
    }

    private static void runTestCWE6() {
        /* BEGIN-AUTOGENERATED-JAVA-TESTS-6 */

        /* END-AUTOGENERATED-JAVA-TESTS-6 */
    }

    private static void runTestCWE7() {
        /* BEGIN-AUTOGENERATED-JAVA-TESTS-7 */

        /* END-AUTOGENERATED-JAVA-TESTS-7 */
    }

    private static void runTestCWE8() {
        /* BEGIN-AUTOGENERATED-JAVA-TESTS-8 */

        /* END-AUTOGENERATED-JAVA-TESTS-8 */
    }

    private static void runTestCWE9() {
        /* BEGIN-AUTOGENERATED-JAVA-TESTS-9 */

        /* END-AUTOGENERATED-JAVA-TESTS-9 */
    }
}
