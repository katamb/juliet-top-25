package testcases.CWE190_Integer_Overflow.s07;

import javax.servlet.http.*;

public class ServletMain extends HttpServlet {

    private static final long serialVersionUID = 1L; /* needed since Servlets are serializable */


    public void doPost(HttpServletRequest request, HttpServletResponse response) {
        doGet(request, response);
    }

    public void doGet(HttpServletRequest request, HttpServletResponse response) {
        doGetCWE1(request, response);
        doGetCWE2(request, response);
        doGetCWE3(request, response);
        doGetCWE4(request, response);
        doGetCWE5(request, response);
        doGetCWE6(request, response);
        doGetCWE7(request, response);
        doGetCWE8(request, response);
        doGetCWE9(request, response);
    }

    private static void doGetCWE1(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-1 */
            (new testcases.CWE190_Integer_Overflow.s07.J17673()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17672()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17683()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17682()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17657()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17656()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17687()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17686()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17615()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17614()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17679()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17678()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17639()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17638()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17641()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17640()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17649()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17648()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17627()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17626()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17695()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17694()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17629()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17628()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17569()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17568()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17669()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17668()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17603()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17602()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17665()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17664()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17637()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17636()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17575()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17574()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17655()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17654()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17613()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17612()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17685()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17684()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17659()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17658()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17589()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17588()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17651()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17650()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17631()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17630()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17661()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17660()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17675()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17674()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17689()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17688()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17591()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17590()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17671()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17670()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17601()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17600()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17699()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17698()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17691()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17690()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17581()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17580()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17693()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17692()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17593()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17592()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17633()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17632()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17587()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17586()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17577()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17576()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17635()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17634()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17605()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17604()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17597()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17596()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17625()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17624()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17607()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17606()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17599()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17598()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17677()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17676()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17571()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17570()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17623()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17622()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17667()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17666()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17573()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17572()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17595()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17594()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17697()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17696()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17653()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17652()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17621()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17620()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17645()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17644()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17643()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17642()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17579()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17578()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17681()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17680()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17647()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17646()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17663()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17662()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17583()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17582()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17619()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17618()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17609()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17608()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17585()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17584()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17617()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17616()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17611()).runTest(request, response);
            (new testcases.CWE190_Integer_Overflow.s07.J17610()).runTest(request, response);
            /* END-AUTOGENERATED-SERVLET-TESTS-1 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE1 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE2(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-2 */

            /* END-AUTOGENERATED-SERVLET-TESTS-2 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE2 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE3(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-3 */

            /* END-AUTOGENERATED-SERVLET-TESTS-3 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE3 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE4(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-4 */

            /* END-AUTOGENERATED-SERVLET-TESTS-4 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE4 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE5(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-5 */

            /* END-AUTOGENERATED-SERVLET-TESTS-5 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE5 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {

                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE6(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-6 */

            /* END-AUTOGENERATED-SERVLET-TESTS-6 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE6 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE7(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-7 */

            /* END-AUTOGENERATED-SERVLET-TESTS-7 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE7 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE8(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-8 */

            /* END-AUTOGENERATED-SERVLET-TESTS-8 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE8 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE9(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-9 */

            /* END-AUTOGENERATED-SERVLET-TESTS-9 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE9 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }
}

