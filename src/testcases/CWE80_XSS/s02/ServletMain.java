package testcases.CWE80_XSS.s02;

import javax.servlet.http.*;

public class ServletMain extends HttpServlet {

    private static final long serialVersionUID = 1L; /* needed since Servlets are serializable */


    public void doPost(HttpServletRequest request, HttpServletResponse response) {
        doGet(request, response);
    }

    public void doGet(HttpServletRequest request, HttpServletResponse response) {
        doGetCWE1(request, response);
        doGetCWE2(request, response);
        doGetCWE3(request, response);
        doGetCWE4(request, response);
        doGetCWE5(request, response);
        doGetCWE6(request, response);
        doGetCWE7(request, response);
        doGetCWE8(request, response);
        doGetCWE9(request, response);
    }

    private static void doGetCWE1(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-1 */

            /* END-AUTOGENERATED-SERVLET-TESTS-1 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE1 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE2(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-2 */

            /* END-AUTOGENERATED-SERVLET-TESTS-2 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE2 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE3(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-3 */

            /* END-AUTOGENERATED-SERVLET-TESTS-3 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE3 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE4(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-4 */

            /* END-AUTOGENERATED-SERVLET-TESTS-4 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE4 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE5(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-5 */

            /* END-AUTOGENERATED-SERVLET-TESTS-5 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE5 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {

                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE6(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-6 */

            /* END-AUTOGENERATED-SERVLET-TESTS-6 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE6 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE7(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-7 */

            /* END-AUTOGENERATED-SERVLET-TESTS-7 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE7 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE8(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-8 */
            (new testcases.CWE80_XSS.s02.J21701()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21700()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21681()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21680()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21733()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21732()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21665()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21664()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21729()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21728()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21667()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21666()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21723()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21722()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21725()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21724()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21739()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21738()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21687()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21686()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21707()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21706()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21689()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21688()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21695()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21694()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21715()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21714()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21713()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21712()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21719()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21718()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21717()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21716()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21703()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21702()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21669()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21668()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21685()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21684()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21657()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21656()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21663()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21662()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21735()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21734()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21711()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21710()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21731()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21730()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21709()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21708()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21699()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21698()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21675()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21674()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21679()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21678()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21677()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21676()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21673()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21672()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21659()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21658()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21683()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21682()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21655()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21654()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21697()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21696()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21671()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21670()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21721()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21720()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21741()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21740()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21693()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21692()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21727()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21726()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21705()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21704()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21661()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21660()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21737()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21736()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21691()).runTest(request, response);
            (new testcases.CWE80_XSS.s02.J21690()).runTest(request, response);
            /* END-AUTOGENERATED-SERVLET-TESTS-8 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE8 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE9(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-9 */

            /* END-AUTOGENERATED-SERVLET-TESTS-9 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE9 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }
}

