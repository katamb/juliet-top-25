package testcases.CWE23_Relative_Path_Traversal;

import javax.servlet.http.*;

public class ServletMain extends HttpServlet {

    private static final long serialVersionUID = 1L; /* needed since Servlets are serializable */


    public void doPost(HttpServletRequest request, HttpServletResponse response) {
        doGet(request, response);
    }

    public void doGet(HttpServletRequest request, HttpServletResponse response) {
        doGetCWE1(request, response);
        doGetCWE2(request, response);
        doGetCWE3(request, response);
        doGetCWE4(request, response);
        doGetCWE5(request, response);
        doGetCWE6(request, response);
        doGetCWE7(request, response);
        doGetCWE8(request, response);
        doGetCWE9(request, response);
    }

    private static void doGetCWE1(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-1 */

            /* END-AUTOGENERATED-SERVLET-TESTS-1 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE1 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE2(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-2 */
            (new testcases.CWE23_Relative_Path_Traversal.J18473()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18472()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18495()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18494()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18491()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18490()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18465()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18464()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18471()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18470()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18527()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18526()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18463()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18462()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18477()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18476()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18557()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18556()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18497()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18496()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18551()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18550()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18475()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18474()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18549()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18548()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18461()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18460()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18569()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18568()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18539()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18538()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18575()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18574()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18541()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18540()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18499()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18498()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18449()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18448()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18563()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18562()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18553()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18552()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18529()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18528()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18479()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18478()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18531()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18530()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18487()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18486()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18533()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18532()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18561()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18560()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18493()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18492()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18567()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18566()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18507()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18506()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18485()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18484()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18451()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18450()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18571()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18570()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18489()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18488()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18543()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18542()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18501()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18500()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18525()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18524()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18483()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18482()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18469()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18468()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18515()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18514()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18503()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18502()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18457()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18456()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18511()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18510()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18521()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18520()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18481()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18480()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18555()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18554()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18545()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18544()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18509()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18508()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18459()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18458()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18565()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18564()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18559()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18558()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18523()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18522()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18573()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18572()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18577()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18576()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18517()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18516()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18547()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18546()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18537()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18536()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18579()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18578()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18453()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18452()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18505()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18504()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18467()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18466()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18455()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18454()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18519()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18518()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18535()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18534()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18513()).runTest(request, response);
            (new testcases.CWE23_Relative_Path_Traversal.J18512()).runTest(request, response);
            /* END-AUTOGENERATED-SERVLET-TESTS-2 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE2 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE3(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-3 */

            /* END-AUTOGENERATED-SERVLET-TESTS-3 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE3 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE4(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-4 */

            /* END-AUTOGENERATED-SERVLET-TESTS-4 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE4 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE5(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-5 */

            /* END-AUTOGENERATED-SERVLET-TESTS-5 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE5 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {

                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE6(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-6 */

            /* END-AUTOGENERATED-SERVLET-TESTS-6 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE6 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE7(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-7 */

            /* END-AUTOGENERATED-SERVLET-TESTS-7 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE7 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE8(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-8 */

            /* END-AUTOGENERATED-SERVLET-TESTS-8 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE8 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE9(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-9 */

            /* END-AUTOGENERATED-SERVLET-TESTS-9 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE9 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }
}

