package testcases.CWE36_Absolute_Path_Traversal;

import javax.servlet.http.*;

public class ServletMain extends HttpServlet {

    private static final long serialVersionUID = 1L; /* needed since Servlets are serializable */


    public void doPost(HttpServletRequest request, HttpServletResponse response) {
        doGet(request, response);
    }

    public void doGet(HttpServletRequest request, HttpServletResponse response) {
        doGetCWE1(request, response);
        doGetCWE2(request, response);
        doGetCWE3(request, response);
        doGetCWE4(request, response);
        doGetCWE5(request, response);
        doGetCWE6(request, response);
        doGetCWE7(request, response);
        doGetCWE8(request, response);
        doGetCWE9(request, response);
    }

    private static void doGetCWE1(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-1 */

            /* END-AUTOGENERATED-SERVLET-TESTS-1 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE1 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE2(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-2 */

            /* END-AUTOGENERATED-SERVLET-TESTS-2 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE2 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE3(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-3 */
            (new testcases.CWE36_Absolute_Path_Traversal.J19291()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19290()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19295()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19294()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19243()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19242()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19321()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19320()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19209()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19208()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19327()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19326()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19257()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19256()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19277()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19276()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19275()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19274()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19223()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19222()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19263()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19262()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19307()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19306()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19299()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19298()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19287()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19286()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19245()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19244()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19219()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19218()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19313()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19312()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19203()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19202()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19259()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19258()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19235()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19234()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19201()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19200()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19279()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19278()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19305()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19304()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19261()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19260()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19315()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19314()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19225()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19224()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19281()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19280()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19319()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19318()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19211()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19210()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19283()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19282()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19317()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19316()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19249()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19248()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19297()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19296()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19221()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19220()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19311()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19310()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19253()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19252()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19269()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19268()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19293()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19292()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19227()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19226()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19231()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19230()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19229()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19228()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19255()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19254()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19247()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19246()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19301()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19300()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19273()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19272()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19251()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19250()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19205()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19204()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19213()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19212()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19237()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19236()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19285()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19284()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19241()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19240()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19215()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19214()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19303()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19302()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19323()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19322()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19265()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19264()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19197()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19196()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19217()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19216()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19267()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19266()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19207()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19206()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19199()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19198()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19239()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19238()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19325()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19324()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19309()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19308()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19289()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19288()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19233()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19232()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19271()).runTest(request, response);
            (new testcases.CWE36_Absolute_Path_Traversal.J19270()).runTest(request, response);
            /* END-AUTOGENERATED-SERVLET-TESTS-3 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE3 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE4(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-4 */

            /* END-AUTOGENERATED-SERVLET-TESTS-4 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE4 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE5(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-5 */

            /* END-AUTOGENERATED-SERVLET-TESTS-5 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE5 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {

                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE6(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-6 */

            /* END-AUTOGENERATED-SERVLET-TESTS-6 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE6 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE7(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-7 */

            /* END-AUTOGENERATED-SERVLET-TESTS-7 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE7 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE8(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-8 */

            /* END-AUTOGENERATED-SERVLET-TESTS-8 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE8 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }

    private static void doGetCWE9(HttpServletRequest request, HttpServletResponse response) {
        try {
            /* BEGIN-AUTOGENERATED-SERVLET-TESTS-9 */

            /* END-AUTOGENERATED-SERVLET-TESTS-9 */
        } catch (Throwable t) {

            /* this will only happen on an IOException or something (the runTest for the test cases will catch any exceptions from the test cases).  So, we just abort
             * and write to the console (since we can't write to the response without possibly throwing another exception)
             */

            System.out.println(
                    " Caught thowable from doGetCWE9 ");

            System.out.println(" Throwable's message = " + t.getMessage());

            System.out.println("Stack trace below");

            StackTraceElement stes[] = t.getStackTrace();

            for (StackTraceElement ste : stes) {
                System.out.println("  " + ste.toString());
            }
        }
    }
}

